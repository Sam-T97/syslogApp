@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<style>
    .grid-container {
        display: grid;
        grid-template-columns: 50% 50%;
        padding: 10px;
    }

    .grid-item {
        border: 1px solid rgba(0, 0, 0, 0.8);
        padding: 0px;
        font-size: 20px;
        text-align: center;
    }
</style>
<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <h2>Here is a current breakdown of the network situation:</h2>
</div>
<div class="grid-container">
    <div class="grid-item">
        <h4>Alerts by Type:</h4>
        <text id="0"></text><br />
        <text id="1"></text><br />
        <text id="2"></text><br />
        <text id="3"></text><br />
        <text id="4"></text><br />
        <text id="5"></text><br />
        <text id="6"></text><br />
        <text id="7"></text><br />
        <b><text id="8"></text></b>
    </div>
    <!--Chart form of the above data-->
    <div class="grid-item"><h4>Syslog Messages by Type:</h4><canvas id="messageType"></canvas></div>
    <!--Line graph of messages inbound over a user defined interval-->
    <div class="grid-item"><h4>Inbound Message Rate:</h4>
        <label>Select interval:</label>&nbsp;<select id="interval" onchange="updateRateInterval()">
            <option>Past Hour</option>
            <option>Past Day</option>
            <option>Past 7 Days</option>
            <option>Past 30 Days</option>
        </select>
        <canvas id="messageTime"></canvas>
        </div>
    <div class="grid-item">
        <h4 id="troubleHeader"></h4>
        <text id="trouble0" style="font-size: x-large"></text><br /><br/>
        <text id="trouble1" style="font-size: x-large"></text><br /><br/>
        <text id="trouble2" style="font-size: x-large"></text><br /><br/>
        <text id="trouble3" style="font-size: x-large"></text><br /><br/>
        <text id="trouble4" style="font-size: x-large"></text>
    </div>
</div>
@section Scripts{
    <!-- set chartJS script -> source: https://www.chartjs.org/ used under MIT license-->
    <script src="js/Chart.js"></script>
    <script>
        $(document).ready(function() {
            //collect first set of metrics and update them every 10 seconds
            updateMetrics();
            window.setInterval(updateMetrics, 10000);

        });

        function updateMetrics() {
            //attempt ajax call to DB to collect metrics in JSON format
            $.ajax(
                {
                    type: "GET",
                    url: "/Index?handler=UpdateMetrics",
                    data: {},
                    contentType: "application/json",
                    dataType: "json",
                    success: function(data) {
                        //parse out the JSON to a JS array
                        var dataObj = JSON.parse(data);
                        var numbers = []; //prepared to collect data from each JSON key
                        var errorNames = [
                            "Emergency", "Alert", "Critical",
                            "Error", "Warning", "Notification",
                            "Information", "Debug", "Total"
                        ]; //array of keys used in the JSON data for faster collection
                        var errorDescriptors = [
                            "System Unusable/Unstable", "Immediate Action Needed", "Investigate Immediately",
                            "Something has Stopped Working", "Something is not Behaving Correctly",
                            "Normal but significant condition", "FYI Only", "For Testing"
                        ];

                        for (var i = 0; i < 8; i++) {
                            document.getElementById(i).innerText =
                                errorNames[i] +
                                ": " +
                                dataObj[errorNames[i]]; //place the metric in each area of section 1
                            document.getElementById(i)
                                .setAttribute("title",
                                    errorDescriptors[i]); //set the tooltip value to the error description 
                            numbers.push(
                                parseInt(
                                    dataObj[errorNames[i]])); //append metric to the array for the graph function later
                        }
                        document.getElementById("8").innerText = errorNames[8] + ": " + dataObj[errorNames[8]];
                        //remove total from each array before making the graph
                        errorNames.pop();
                        numbers.pop();
                        //construct ChartJS bar graph to visualise counts of each error type
                        var ctx = document.getElementById('messageType');
                        var messageType = new Chart(ctx,
                            {
                                type: 'bar',
                                data: {
                                    labels: errorNames,
                                    datasets: [
                                        {
                                            label: '# of Messages',
                                            data: numbers,
                                            backgroundColor: [
                                                'rgba(255, 99, 132, 0.2)',
                                                'rgba(54, 162, 235, 0.2)',
                                                'rgba(255, 206, 86, 0.2)',
                                                'rgba(75, 192, 192, 0.2)',
                                                'rgba(153, 102, 255, 0.2)',
                                                'rgba(255, 159, 64, 0.2)'
                                            ],
                                            borderColor: [
                                                'rgba(255, 99, 132, 1)',
                                                'rgba(54, 162, 235, 1)',
                                                'rgba(255, 206, 86, 1)',
                                                'rgba(75, 192, 192, 1)',
                                                'rgba(153, 102, 255, 1)',
                                                'rgba(255, 159, 64, 1)'
                                            ],
                                            borderWidth: 0
                                        }
                                    ]

                                },
                                options: {
                                    scales: {
                                        yAxes: [
                                            {
                                                ticks: {
                                                    beginAtZero: true
                                                }
                                            }
                                        ]
                                    }
                                }
                            });
                    }
                });
            //Begin Data collection for top 5 systems
            $.ajax({
                type: "GET",
                url: "/Index?handler=TroubleSystems",
                data: {},
                contentType: "application/json",
                dataType: "json",
                success: function(data) {
                    var hosts = data.hostnames;
                    document.getElementById("troubleHeader").innerText =
                        "Top " + hosts.length + " most troublesome systems:";
                    for (var i = 0; i < hosts.length; i++) {
                        document.getElementById("trouble" + i).innerText = hosts[i];
                    }
                }
            });
            //Call Line Graph Update Method by calling the action associated with the resolution selection dropdown
            updateRateInterval();
        }

        function updateRateInterval() {
            $.ajax({
                type: "GET",
                url: "/Index?handler=InboundData",
                data: { "time": (document.getElementById("interval").selectedIndex) },
                contentType: "application/json",
                dataType: "json",
                success: function(data) {
                    console.log(data);
                    var labels = [];
                    var values = [];
                    $.each(data,
                        function(index) {
                            labels.push(data[index].day);
                            values.push(data[index].rate);
                        });
                    var ctx = document.getElementById('messageTime');
                    var messageTime = new Chart(ctx,
                        {
                            type: "line",
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: "Rate by min, hour, day. Only intervals with data will be shown",
                                    data: values,
                                    fill: false,
                                    borderColor: "rgb(75, 192, 192)"
                                }]
                            }
                        });
                }
            });
        }
    </script>
}